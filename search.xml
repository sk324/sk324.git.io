<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu同时开启两张网卡</title>
    <url>/2023/10/27/Ubuntu%E5%90%8C%E6%97%B6%E5%BC%80%E5%90%AF%E4%B8%A4%E5%BC%A0%E7%BD%91%E5%8D%A1/</url>
    <content><![CDATA[<h3 id="问题：不能同时使用两张网卡"><a href="#问题：不能同时使用两张网卡" class="headerlink" title="问题：不能同时使用两张网卡"></a>问题：不能同时使用两张网卡</h3><p>最近受实习公司安排在学习raw socket。用其写了一个简单的自定义协议(ETHER_Hdr + data)。想测试其能否正常通信，于是想到在虚拟机中再添加一张虚拟网卡，一张用于发送消息一张用于接收消息。<span id="more"></span></p>
<p>添加操作还是比较简单，主要分两步：</p>
<ol>
<li>在虚拟机的设置中添加一个网络适配器并选择想要的连接方式：</li>
</ol>
<img src="/2023/10/27/Ubuntu%E5%90%8C%E6%97%B6%E5%BC%80%E5%90%AF%E4%B8%A4%E5%BC%A0%E7%BD%91%E5%8D%A1/1.png" class="" title="404NotFound">

<ol start="2">
<li>​	根据需要在虚拟网络编辑器处添加虚拟网卡</li>
</ol>
<img src="/2023/10/27/Ubuntu%E5%90%8C%E6%97%B6%E5%BC%80%E5%90%AF%E4%B8%A4%E5%BC%A0%E7%BD%91%E5%8D%A1/2.png" class="" title="404NotFound">

<p>进行上述操作后，打开ubuntu20.04。</p>
<p>用<code>ifconfig</code>命令查看网卡信息，发现现在有两张网卡了，但是只能有一个有ip地址。再发现：两张网卡也不能同时使用，这样肯定是无法模拟通信的。</p>
<p>同时开启两张网卡解决方式如下：</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<p>ubuntu从17.10开始，已放弃在&#x2F;etc&#x2F;network&#x2F;interface里固定IP的配置，即使配置也不会生效，而是改成netplan方式，即下面我们用到的这个配置文件</p>
</blockquote>
<ol>
<li>更改如下的配置文件：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz@rz-virtual-machine:~$ vim /etc/netplan/01-network-manager-all.yaml </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加如下内容：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let NetworkManager manage all devices on this system</span></span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: NetworkManager</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: true</span><br><span class="line">    ens37:</span><br><span class="line">      dhcp4: true</span><br></pre></td></tr></table></figure>

<p>注意冒号后面有个空格。ens33和ens37分别是网卡的名字。编辑完后保存退出</p>
<ol start="3">
<li>使配置生效</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netplan apply</span><br></pre></td></tr></table></figure>

<p>over!现在发现可以同时打开两张网卡了。</p>
<img src="/2023/10/27/Ubuntu%E5%90%8C%E6%97%B6%E5%BC%80%E5%90%AF%E4%B8%A4%E5%BC%A0%E7%BD%91%E5%8D%A1/3.png" class="" title="404NotFound">

<p>说个题外话：测试程序通信的时候要注意两个网卡的ip要在同一网段下。不然无法正常通信~</p>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>Ubuntu网络配置</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode27移除元素</title>
    <url>/2023/10/15/leetcode27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并”原地”修改输入数组。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用”双指针”解决：一个快指针：fast，一个慢指针：slow </p>
<p>fast用于找到不需要删除的元素</p>
<p>slow用于保存下一个被覆盖元素的下标——数组元素删除实际上是将其原本值覆盖了。</p>
<p>用fast遍历数组</p>
<table>
<thead>
<tr>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">3</th>
<th align="center">5</th>
</tr>
</thead>
</table>
<p>以上述数组为例，起初fast、slow都指向1，即fast&#x3D;slow&#x3D;0；</p>
<p>如果fast指向的元素不等于要删除的值，就将该元素的值赋给slow所在下标处(覆盖)，然后slow++。可理解slow前的为”新数组”。</p>
<p>如果fast指向的元素等于要删除的值，就不会进行赋值操作，fast继续向后移动。这样遍历完后，slow前面的元素值都不等于要删除的值，slow的大小为”新数组”的长度。<span id="more"></span></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int removeElement(vector&lt;int&gt;&amp; nums, int val) </span><br><span class="line">&#123;</span><br><span class="line">    int fast = 0, slow = 0;</span><br><span class="line">    for (fast; fast &lt; nums.size(); fast++)</span><br><span class="line">    &#123;</span><br><span class="line">   		if(nums[fast] != val)</span><br><span class="line">    	&#123;</span><br><span class="line">    		nums[slow++] = nums[fast];     // 将快指针指向元素的值赋给slow下标位置的元素</span><br><span class="line">   		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似于erase方法。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找leetcode704</title>
    <url>/2023/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol>
<li>首先定义搜索区间，常用的是左闭右闭[left, right]和左闭右开[left, right)。</li>
<li>计算mid值：mid&#x3D;(left+right)&#x2F;2</li>
<li>将nums[mid]与target查找值比较，缩小搜索区间。更新left&#x2F;right的值。</li>
<li>重复2，3两步，直至nums[mid] &#x3D;&#x3D; target 或者查找失败。<span id="more"></span></li>
</ol>
<p>注意：使用二分查找，在查找过程中，查找区间必须与刚开始时保持一致，不能更改。由此也可以决定出while循环退出的条件和left&#x2F;right的重新取值。</p>
<p>在使用二分查找时，需特别注意</p>
<ol>
<li><strong>循环终止条件</strong>：while(left &lt; right)  OR  while(left &lt;&#x3D; right)？</li>
<li><strong>left&#x2F;right的更新</strong>：left &#x3D; mid OR left &#x3D; mid + 1; right&#x3D; mid OR right&#x3D; mid - 1</li>
</ol>
<p>通过起初的查找区间，能够确定上述条件应如何选择。——<strong>保持查找区间不变与区间合法性的原则。</strong></p>
<p>总结：区间取闭的mid±1，取开的等于mid。</p>
<p>以下以两种常用的区间举例：</p>
<h2 id="左闭右闭-left-right"><a href="#左闭右闭-left-right" class="headerlink" title="左闭右闭[left, right]"></a>左闭右闭[left, right]</h2><p>核心代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt;= right)        <span class="comment">//left==right时，在左闭右闭区间是合法的，故此处是left &lt;= right</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">    &#123;								<span class="comment">// </span></span><br><span class="line">        left = mid + <span class="number">1</span>;               </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid])</span><br><span class="line">    &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="左闭右开-left-right"><a href="#左闭右开-left-right" class="headerlink" title="左闭右开[left, right)"></a>左闭右开[left, right)</h2><p>核心代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right)         <span class="comment">//left==right在左闭右开区间非法，故此处为left &lt; right</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">	&#123;</span><br><span class="line">		left = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid])</span><br><span class="line">	&#123;</span><br><span class="line">		right = mid;          <span class="comment">// [left, mid) 这样才能保证正确的查找区间</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> mid;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p><em>leetcode704</em></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言字符串拼接问题——使用sprintf()函数</title>
    <url>/2023/10/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>​	写一个程序向一个文件写入内容，当写入文件大小超过 <em>xxxB</em> 时，关闭该文件，重新创建一个文件继续写入。</p>
<p>​	可应用于写日志文件——保证每个日志文件的大小不过大。</p>
<p>​	在给文件命名时遇到问题：欲创建并打开“.&#x2F;xxx0 ”,“.&#x2F;xxx1 ”,“.&#x2F;xxx2 ”的文件来写入数据。想到将字符串“.&#x2F;xxx”与int num拼接起来，在此，拼接该字符串与整型时遇到问题，记录一下如何解决的。<span id="more"></span></p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><ul>
<li>用**sprintf()**函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> fName[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 打开文件路径</span></span><br><span class="line"><span class="built_in">sprintf</span>(fName, <span class="string">&quot;%s%d&quot;</span>, <span class="string">&quot;./madaemon&quot;</span>, i);  <span class="comment">// 拼接&quot;./madaemon&quot; 与 i</span></span><br><span class="line">fd = open(fName, O_RDWR | O_CREAT | O_APPEND, <span class="number">0777</span>);</span><br></pre></td></tr></table></figure>

<p>这里需要注意：sprintf函数的第一个参数定义一个char数组传入就行了，要确保数组长度有文件路径那么长。</p>
<h1 id="错误想法"><a href="#错误想法" class="headerlink" title="错误想法"></a>错误想法</h1><ul>
<li>将一个整型的数强转为数字字符串——不可行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *c = (char*)malloc(sizeof(int));</span><br><span class="line">c = &amp;i;</span><br><span class="line">printf(&quot;%s\n&quot;, c);   // 输出的是i值对应的ASCII码值的字符</span><br></pre></td></tr></table></figure>

<ul>
<li>使用itoa()函数——不可行</li>
</ul>
<p>Linux下没有这个库函数</p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>常用排序算法总结</title>
    <url>/2023/10/01/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="时间复杂度及空间复杂度"><a href="#时间复杂度及空间复杂度" class="headerlink" title="时间复杂度及空间复杂度"></a>时间复杂度及空间复杂度</h1><h1 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h1>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>消费者-生产者模型(mutex和cond实现)</title>
    <url>/2023/10/10/%E6%B6%88%E8%B4%B9%E8%80%85-%E7%94%9F%E4%BA%A7%E8%80%85%E6%A8%A1%E5%9E%8B-mutex%E5%92%8Ccond%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="模型概念"><a href="#模型概念" class="headerlink" title="模型概念"></a>模型概念</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p> 生产者消费者问题又称有限缓冲区问题，问题描述如下：假设有一组生产者进程（线程）P1,P2,……Pk和一组消费者进程（线程）C1,C2……Cm，通过n个缓冲区组成缓冲池，共同完成”生产和消费”任务。 </p>
<ul>
<li>生产者生产：生产者往缓冲区中放入物品。</li>
<li>消费者消费：消费者从缓冲区中取出物品。</li>
<li>缓冲区交互：缓冲区是临界区，所有针对缓冲区的操作必须互斥进行。<span id="more"></span></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>缓冲区已满：生产者不能生产→生产者睡眠待消费者消费后(缓冲区未满)唤醒</li>
<li>缓冲区为空：消费者不能消费→消费者睡眠待生产者生产(缓冲区不为空)后唤醒</li>
<li>对所有生产者和消费者而言，需将缓冲池看作一个整体，缓冲池是一个临界资源，任何一个进程（线程）要对缓冲池进行”存”或”取”的时候，需要与其他进程（线程）进行互斥</li>
</ol>
<h1 id="互斥量与条件变量"><a href="#互斥量与条件变量" class="headerlink" title="互斥量与条件变量"></a>互斥量与条件变量</h1><p>如果不需要信号量的计数能力，有时可以使用信号量的一个简化版本：互斥量。互斥量仅适用于管理共享资源或一小段代码。<strong>互斥量</strong>与<strong>条件变量</strong>通常一起使用。</p>
<h2 id="互斥量基本原理"><a href="#互斥量基本原理" class="headerlink" title="互斥量基本原理"></a>互斥量基本原理</h2><ul>
<li>一个线程如果想要进入临界区，它首先尝试锁住相关的互斥量。如果互斥量没有加锁，那么这个线程可以立即进入，并且互斥量被锁定以防止其他线程进入。</li>
<li>如果互斥量已经被加锁，则调用线程被阻塞，直到该互斥量被解锁。</li>
</ul>
<h2 id="二者联系"><a href="#二者联系" class="headerlink" title="二者联系"></a>二者联系</h2><p>互斥量允许或阻塞对临界区的访问。</p>
<p>条件变量允许线程由于一些未达到的条件而阻塞。</p>
<p>生产者使用互斥量可以进行原子性检查，而不受其他线程干扰。但是当缓冲区已满时，生产者需要阻塞自己并等待被唤醒，这便是条件变量的工作。</p>
<p>互斥量与条件变量经常一起使用，这种模式用于让一个线程锁住一个互斥量，然后当它不能获得它期待的结果时等待一个条件变量(pthread_cond_wait)。最后，一个线程会向它发信号(pthread_cond_signal&#x2F;pthread_cond_broadcast)，使唤醒继续执行。</p>
<p>(pthread_cond_broadcast唤醒所有在等待的线程)</p>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><p>条件变量不会存在内存中。如果将一个信号量传递给一个没有线程在等待的条件变量，那么这个信号就会丢失。程序员必须小心使用避免信号丢失。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>作为如何使用一个互斥锁和条件变量的例子，一下程序展示了一个简单的生产者-消费者问题(一个缓冲区，大小为3)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10      <span class="comment">// 需要生产的数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">pthread_cond_t</span> condp, condc;</span><br><span class="line"><span class="type">int</span> buf_size = <span class="number">3</span>;      <span class="comment">// 缓冲区大小</span></span><br><span class="line"><span class="type">int</span> buf[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 缓冲区</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;       <span class="comment">// 缓冲区已使用大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex); </span><br><span class="line">        <span class="keyword">if</span> (count &gt;= buf_size)          <span class="comment">// 缓冲区满   </span></span><br><span class="line">            pthread_cond_wait(&amp;condp, &amp;mutex);   </span><br><span class="line">        </span><br><span class="line">        buf[count] = i;      <span class="comment">// 将数据放入缓冲区</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pro[%d]---buf[%d]:[%d]\n&quot;</span>, i, count, buf[count]);</span><br><span class="line">        count++;        <span class="comment">// 缓冲区使用+1</span></span><br><span class="line">        pthread_cond_signal(&amp;condc);  </span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;producer exit\n&quot;</span>);</span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)     <span class="comment">// 缓冲区为空</span></span><br><span class="line">            pthread_cond_wait(&amp;condc, &amp;mutex);</span><br><span class="line"></span><br><span class="line">        --count;             <span class="comment">// 缓冲区已用大小-1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;con[%d]---buf[%d]:[%d]\n&quot;</span>, i, count, buf[count]);</span><br><span class="line">        pthread_cond_signal(&amp;condp);  </span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;consumer exit\n&quot;</span>);</span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> pro, con;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;condp, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;condc, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;pro, <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;con, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_join(pro, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(con, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_cond_destroy(&amp;condp);</span><br><span class="line">    pthread_cond_destroy(&amp;condc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h2><img src="/2023/10/10/%E6%B6%88%E8%B4%B9%E8%80%85-%E7%94%9F%E4%BA%A7%E8%80%85%E6%A8%A1%E5%9E%8B-mutex%E5%92%8Ccond%E5%AE%9E%E7%8E%B0/run_result.png" class="" title="fail">

]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>互斥量</tag>
        <tag>条件变量</tag>
      </tags>
  </entry>
  <entry>
    <title>线程相关概念</title>
    <url>/2023/10/13/%E8%BF%9B%E7%A8%8B&amp;%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="线程之间的通信方式"><a href="#线程之间的通信方式" class="headerlink" title="线程之间的通信方式"></a>线程之间的通信方式</h3><p>在多线程程序中，使用线程间的同步机制通常更为常见和高效</p>
<ol>
<li><strong>共享变量：</strong> 共享变量是最简单的线程间通信的方式之一。其原理是多个线程访问同一个变量，如果一个线程修改了该变量，则其他线程也能读到该变量的修改值。</li>
<li><strong>信号量：</strong> 信号量是一个计数器，用来控制可同时访问临界区的线程数。当信号量大于零时，线程可以访问资源并将信号量减一；当信号量等于零时，线程需要等待。信号量常用于控制线程的并发数量。</li>
<li><strong>互斥量</strong>：采用互斥对象机制，只有拥有互斥对象的线程才可以访问临界区。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>
<li><strong>条件变量</strong>： 条件变量用于在线程间建立一个先行发生关系。一个线程等待某个条件为真时，可以在条件变量上等待，而其他线程可以在满足条件时通知等待的线程。</li>
<li><strong>读写锁</strong>：读写锁与互斥量类似。读写锁允许一个线程写，多个线程读，这样效率就比互斥锁要高。</li>
<li><strong>消息队列：</strong> 线程可以通过消息队列发送和接收消息。一个线程可以将消息放入队列，而其他线程则可以从队列中获取消息。</li>
<li><strong>管道：</strong> 管道是一种<strong>半双工</strong>的通信方式，用于在两个相关的线程之间传递数据。一个线程可以将数据写入管道，而另一个线程则可以从管道中读取数据。</li>
<li><strong>套接字：</strong> 套接字是一种<strong>全双工</strong>的通信方式，可用于在不同机器或同一机器的不同进程之间进行通信。线程可以通过套接字在网络上发送和接收数据。</li>
<li><strong>信号：</strong> 信号是异步通信机制，用于通知进程发生了某个事件。例如，<code>SIGTERM</code>信号用于终止进程，<code>SIGINT</code>信号用于中断进程。（异步通信指的是发送信号的进程可以继续执行，而不必等待接收信号的进程立即响应）</li>
<li><strong>共享内存：</strong> 共享内存允许多个进程访问同一块内存区域。其原理是通过内存映射，将一个内存区域映射到多个进程的地址空间中，这样多个进程就能共享这块内存。</li>
</ol>
<h3 id="进程之间共享资源的方式"><a href="#进程之间共享资源的方式" class="headerlink" title="进程之间共享资源的方式"></a>进程之间共享资源的方式</h3><p>1.消息队列<br>2.共享<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a><br>3.管道（有名管道&#x2F;无名管道）<br>4.信号<br>5.套接字</p>
<h3 id="同一个进程的不同线程之间可以共享的资源"><a href="#同一个进程的不同线程之间可以共享的资源" class="headerlink" title="同一个进程的不同线程之间可以共享的资源"></a>同一个进程的不同线程之间可以共享的资源</h3><p>进程代码段、进程的公有数据(利用这些共享的数据，线程很容易的实现相互之间的通讯)、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。</p>
<p>进程拥有这许多共性的同时，还拥有自己的个性。有了这些个性，线程才能实现并发性。这些个性包括：</p>
<ol>
<li><p>线程ID</p>
<p>每个线程都有自己的线程ID，这个ID在本进程中是唯一的。进程用此来标识线程。</p>
</li>
<li><p>寄存器组的值</p>
<p>由于线程间是并发运行的，每个线程有自己不同的运行线索，当从一个线程切换到另一个线程上时，必须将原有的线程的寄存器集合的状态保存，以便将来该线程在被重新切换到时能得以恢复。</p>
</li>
<li><p>线程的堆栈</p>
<p>堆栈是保证线程独立运行所必须的。线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程 必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影响。</p>
</li>
<li><p>错误返回码</p>
<p>由于同一个进程中有很多个线程在同时运行，可能某个线程进行系统调用后设置了errno值，而在该线程还没有处理这个错误，另外一个线程就在此时被调度器投入运行，这样错误值就有可能被修改。所以，不同的线程应该拥有自己的错误返回码变量。</p>
</li>
<li><p>线程的信号屏蔽码</p>
<p>由于每个线程所感兴趣的信号不同，所以线程的信号屏蔽码应该由线程自己管理。但所有的线程都共享同样的信号处理器。</p>
</li>
<li><p>线程的优先级</p>
<p>由于线程需要像进程那样能够被调度，那么就必须要有可供调度使用的参 数，这个参数就是线程的优先级。</p>
</li>
</ol>
<p>​     <em><strong>在一个进程的线程共享堆区，而进程中的线程各自维持自己堆栈。</strong></em></p>
<h3 id="多线程锁的类型、优缺点及使用场景"><a href="#多线程锁的类型、优缺点及使用场景" class="headerlink" title="多线程锁的类型、优缺点及使用场景"></a>多线程锁的类型、优缺点及使用场景</h3><ol>
<li><strong>互斥锁（Mutex Lock）</strong></li>
</ol>
<ul>
<li><p><strong>优点：</strong>① 简单易用，容易理解。</p>
<p>​            ② 提供了最基本的互斥访问控制，可以确保在任意时刻只有一个线程能够访问共享资源。</p>
</li>
<li><p><strong>缺点：</strong>可能引起死锁（Deadlock）问题，需要小心设计，确保不会出现循环等待的情况。</p>
</li>
<li><p><strong>使用场景：</strong>适用于需要独占式访问共享资源的场景，确保同时只有一个线程可以进入临界区的情况。</p>
</li>
</ul>
<ol start="2">
<li><strong>读写锁（Read-Write Lock）</strong></li>
</ol>
<ul>
<li><strong>优点：</strong>① 允许多个线程同时读取共享资源，提高了并发性。</li>
</ul>
<p>​				   ② 写锁是互斥的，确保写操作的独占性。</p>
<ul>
<li><strong>缺点：</strong>写锁可能导致读取操作被阻塞，当写锁被持有时，其他线程无法获得读锁。</li>
<li><strong>使用场景：</strong>适用于读操作频繁，写操作较少的场景，提高了读操作的并发性能。</li>
</ul>
<ol start="3">
<li><strong>条件变量（Condition Variable）</strong></li>
</ol>
<ul>
<li><strong>优点：</strong>允许线程在特定条件下等待或被唤醒，提供了更灵活的同步控制。</li>
<li><strong>缺点：</strong>需要与互斥锁结合使用，可能引入复杂性。</li>
<li><strong>使用场景：</strong>适用于生产者-消费者问题等需要特定条件下线程等待和唤醒的场景。</li>
</ul>
<ol start="4">
<li><strong>自旋锁（Spin Lock）</strong></li>
</ol>
<ul>
<li><strong>优点：</strong>避免了线程切换的开销，适用于短期的临界区。</li>
<li><strong>缺点：</strong>长时间自旋可能导致CPU资源浪费。</li>
<li><strong>使用场景：</strong>适用于临界区很小、操作非常快的场景，避免线程切换开销。</li>
</ul>
<ol start="5">
<li><strong>信号量（Semaphore）</strong></li>
</ol>
<ul>
<li><strong>优点：</strong>可以用于限制线程的并发数量，提供了更细粒度的控制。</li>
<li><strong>缺点：</strong>容易引起死锁，需要小心设计。</li>
<li><strong>使用场景：</strong>主要用在多个线程需要对共享数据进行访问的时候。适用于控制并发线程数量的场景，例如连接池、资源池等。</li>
</ul>
<h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><ol>
<li><strong>定义：</strong></li>
</ol>
<p>进程是资源分配的基本单位，线程是CPU调度和分派的基本单位</p>
<p>线程是进程的一部分，一个线程只能属于一个进程，一个进程可以有多个线程，但至少有一个线程</p>
<ul>
<li><strong>进程：</strong> 进程是程序的一次执行过程，是一个正在运行的程序。它拥有独立的内存空间，包括代码、数据、打开的文件、系统资源等。</li>
<li><strong>线程：</strong> 线程是进程中的一个执行单元，一个进程可以拥有多个线程，它们共享进程的内存空间和资源。</li>
</ul>
<ol start="2">
<li><strong>资源分配：</strong></li>
</ol>
<ul>
<li><strong>进程：</strong> 进程是系统分配资源的最小单位，每个进程拥有独立的内存空间，相互之间不会直接共享。</li>
<li><strong>线程：</strong> 线程是进程内的执行单元，多个线程可以共享同一进程的内存空间，包括代码段、数据段、打开的文件(文件描述符)和其他系统资源。</li>
</ul>
<ol start="3">
<li><strong>切换代价：</strong></li>
</ol>
<ul>
<li><strong>进程：</strong> 进程间切换的代价相对较高，因为切换进程需要保存和恢复整个进程的状态，包括内存映像、寄存器等。</li>
<li><strong>线程：</strong> 线程间切换的代价相对较低，因为线程共享同一进程的地址空间，切换时只需要保存和恢复少量的寄存器内容。</li>
</ul>
<ol start="4">
<li><strong>通信和同步：</strong></li>
</ol>
<ul>
<li><p><strong>进程：</strong> 进程间通信（IPC）相对复杂，通信机制包括管道、消息队列、信号量、共享内存等。</p>
</li>
<li><p><strong>线程：</strong> 线程间通信较为简单，因为它们共享同一进程的内存空间，可以直接通过共享变量等方式进行通信。但需要注意同步问题，以避免竞态条件。</p>
<blockquote>
<p>竞态条件：多个进程读写某些共享数据，而最后的结果取决于进程运行的精准时序。</p>
</blockquote>
</li>
</ul>
<ol start="5">
<li><strong>并发性：</strong></li>
</ol>
<ul>
<li><strong>进程：</strong> 进程是系统中独立运行的单位，多个进程之间可以并发执行。</li>
<li><strong>线程：</strong> 线程是进程内的执行单元，多个线程在同一进程内并发执行，可以充分利用多核处理器的优势。</li>
</ul>
<ol start="6">
<li><strong>失败影响范围：</strong></li>
</ol>
<ul>
<li><strong>进程：</strong> 一个进程的崩溃通常不会影响其他进程，因为它们拥有独立的内存空间。</li>
<li><strong>线程：</strong> 一个线程的崩溃可能会影响到同一进程内的其他线程，因为它们共享相同的内存空间和资源。</li>
</ul>
]]></content>
      <categories>
        <category>线程理论</category>
      </categories>
      <tags>
        <tag>线程</tag>
        <tag>进程</tag>
      </tags>
  </entry>
</search>
